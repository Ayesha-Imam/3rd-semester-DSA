// DSA that I don't quite understand

// Graph Data Structure

// graph through adjacency matrix

#include<iostream>
using namespace std;

int graph[10][10] ;
int edge;

// for undirected graph

//add edge with user input
void addedge() {
	int x, y;
	cout << "enter # of edges to add: ";
	cin >> edge;
	for (int i = 0; i < edge; i++) {
		cout << "Edges between? ";
		cout << "enter 1st vertex";
		cin >> x;
		cout << "enter 2nd vertex";
		cin >> y;
		graph[x][y] = 1;
		graph[y][x] = 1;
	}
}

//delete edge with user input
void deledge() {
	int x, y;
	cout << "enter # of edges to delete: ";
	cin >> edge;
	for (int i = 0; i < edge; i++) {
		cout << "Edges between? ";
		cout << "enter 1st vertex";
		cin >> x;
		cout << "enter 2nd vertex";
		cin >> y;
		graph[x][y] = 0;
		graph[y][x] = 0;
	}
}

void print(int v) {
	for (int i = 0; i < v; i++) {
		for (int j = 0; j < v; j++) {
			cout << " " << graph[i][j];
		}
		cout << endl;
	}
}


int main() {
	int v;
	cout << "enter # of vertices: ";
	cin >> v;
	addedge();
	print(v);
	deledge();
	print(v);
}

//graph through linked list

#include<iostream>
#include<list>

using namespace std;

class graph {
	int vertex;
	list<int>* l;

public:
	graph(int v) {
		vertex = v;
		l = new list<int>[vertex];
	}

	void addedge(int x, int y) {
		l[x].push_back(y);
		l[y].push_back(x);
	}

	void deledge(int x, int y) {
		l[x].remove(y);
		l[y].remove(x);
	}

	void addnode(int v) {
		vertex = v;
		l = new list<int>[vertex];
	}

	void print() {
		for (int i = 0; i < vertex; i++) {
			cout << i << ": ";
			for (auto j : l[i]) {
				cout << " " << j;
			}
			cout << endl;
		}
	}

};

int main() {
	graph g(4);
	g.addedge(0, 1);
	g.addedge(0, 2);
	g.addedge(0, 3);
	g.print();
	g.deledge(0, 2);
	g.print();
	g.addnode(5);
	g.print();
}

// Stack Ds
// Stack push and pop

#include<iostream>
using namespace std;

int item, stak[3] = {}, top = -1, n = 3;
void push() {
	cout << "Enter number to insert in stack" << endl;
	cin >> item;
	if (top == n - 1) {
		cout << "stack overflow" << endl;
	}
	else {
		top = top + 1;
		stak[top] = item;
	}
}

void pop() {
	if (top == -1) {
		cout << "stack underflow" << endl;
	}
	else {
		cout << "the deleted element is: " << stak[top] << endl;
		top = top - 1;
	}
}

void print() {
	cout << "stack" << endl;
	for (int i = top; i >=0; i--) {
		cout << stak[i] << endl;
	}
}

int main() {
	push();
	push();
	push();
	push();
	print();
	pop();
	print();
}

// String reversal using Stack ADT
// 2 stacks are used

#include<stack>

int main() {
	char arr[20] = {};
	int n = sizeof(arr) / sizeof(arr[0]);
	stack<char> stk1, stk2;

	cout << "input text: " ;
	cin.getline(arr, 20);
	for (int i = 0; i < n; i++) {
		stk1.push(arr[i]);
	}
	while (!stk1.empty()) {
		stk2.push(stk1.top());
		stk1.pop();
	}
	cout << "output text: ";
	for (int i = 0; i < n; i++) {
		cout << stk2.top();
		stk2.pop();
	}
}

// Array DS 
// Traversal, Insertion and deletion

#include<iostream>

using namespace std;

void traverse(int arr[],int arr_size) {
	for (int i = 0; i < arr_size; i++) {
		cout << arr[i] << " ";
	}
}

void insert(int arr[], int &arr_size) {
	int pos, val;
	cout << "\nenter position to insert" << endl;
	cin >> pos;
	cout << "enter value to insert" << endl;
	cin >> val;
	for (int i = arr_size - 1; i >= pos; i--) {
		arr[i + 1] = arr[i];
	}
	arr[pos] = val;
	arr_size++;
}

void deletion(int arr[],int &arr_size) {
	int ind;
	cout << "\nenter position to delete" << endl;
	cin >> ind;
	for (int i = ind; i <= arr_size-1; i++) {
		arr[i] = arr[i + 1];
	}
	arr_size--;
}

int main() {
	int A[] = { 2,4,6,8 };
	int s = sizeof(A) / sizeof(A[0]);
	traverse(A, s);
	insert(A, s);
	traverse(A, s);
	deletion(A, s);
	traverse(A, s);

}
